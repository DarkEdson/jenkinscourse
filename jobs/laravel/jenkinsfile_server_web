pipeline {
    agent {label "newslave"}
        parameters {   
            string(name: 'name_container', defaultValue: 'qa-lms', description: 'nombre del contenedor')
            string(name: 'name_imagen', defaultValue: 'qa-lms', description: 'nombre de la imagen')
            string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
            string(name: 'puerto_imagen', defaultValue: '80', description: 'puerto de la imagen')
        }
    environment {
        AWS_REGION = 'us-east-2'
        AWS_ACCOUNT = '024789436172'
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"
    }
    stages {
        stage ('stop/rm') {

            when {
                expression {
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    return DOCKER_EXIST != ''
                }
            }
            steps {
                script {
                    sh '''
                        docker stop ${name_final}
                    '''
                }
            }
        }
        stage ('build') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                    sh '''
                    docker build . -t ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
        stage ('run') {
            steps {
                script {
                    sh '''
                    docker run --rm -dtp ${puerto_imagen}:80 --name ${name_final} ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
        stage ('command') {
            steps {
                script {
                    sh '''
                        docker exec ${name_final} php artisan migrate
                    '''
                }
            }
        }
    }
}